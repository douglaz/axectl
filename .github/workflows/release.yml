name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get tag
      id: get_tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          sed -n "/^## \[${{ steps.get_tag.outputs.tag }}\]/,/^## \[/p" CHANGELOG.md | head -n -1 >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "changelog=Release ${{ steps.get_tag.outputs.tag }}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_tag.outputs.tag }}
        release_name: axectl ${{ steps.get_tag.outputs.tag }}
        body: |
          ## axectl ${{ steps.get_tag.outputs.tag }}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ### Installation
          
          Download the appropriate binary for your platform below, or use one of these methods:
          
          ```bash
          # Using Nix
          nix run 'git+https://github.com/master/axectl.git#${{ steps.get_tag.outputs.tag }}'
          
          # Using Cargo
          cargo install --git https://github.com/master/axectl.git --tag ${{ steps.get_tag.outputs.tag }}
          ```
          
          ### Checksums
          
          See `checksums.txt` for SHA256 checksums of all binaries.
        draft: false
        prerelease: ${{ contains(steps.get_tag.outputs.tag, '-') }}

  build-release:
    name: Build Release (${{ matrix.target }})
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux Static Binaries (Primary)
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: axectl-x86_64-linux-musl.tar.gz
            primary: true
            
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            name: axectl-aarch64-linux-musl.tar.gz
            primary: true
            
          # macOS (Secondary)
          - target: x86_64-apple-darwin
            os: macos-latest
            name: axectl-x86_64-macos.tar.gz
            
          - target: aarch64-apple-darwin
            os: macos-latest
            name: axectl-aarch64-macos.tar.gz
            
          # Windows (Secondary)
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: axectl-x86_64-windows.zip
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    # Linux musl setup
    - name: Install musl tools (Linux)
      if: contains(matrix.target, 'linux-musl')
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools pkg-config
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-musl" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
        fi

    # Cross compilation setup for aarch64-linux
    - name: Setup cross compilation (aarch64-linux)
      if: matrix.target == 'aarch64-unknown-linux-musl'
      run: |
        echo "CC_aarch64_unknown_linux_musl=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

    # musl static linking setup
    - name: Setup musl linking (x86_64-linux)
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: |
        echo "CC_x86_64_unknown_linux_musl=musl-gcc" >> $GITHUB_ENV
        echo "CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=musl-gcc" >> $GITHUB_ENV

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Create package (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar czf ../../../${{ matrix.name }} axectl
        cd ../../..
        sha256sum ${{ matrix.name }} >> checksums.txt

    - name: Create package (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../${{ matrix.name }} axectl.exe
        cd ../../..
        certutil -hashfile ${{ matrix.name }} SHA256 >> checksums.txt

    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.name }}
        asset_name: ${{ matrix.name }}
        asset_content_type: application/gzip

    - name: Upload checksums
      uses: actions/upload-artifact@v4
      with:
        name: checksums
        path: checksums.txt

  upload-checksums:
    name: Upload Checksums
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all checksums
      uses: actions/download-artifact@v4
      with:
        name: checksums

    - name: Combine checksums
      run: |
        cat checksums.txt > combined_checksums.txt
        sort -u combined_checksums.txt > checksums.txt

    - name: Upload checksums to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain