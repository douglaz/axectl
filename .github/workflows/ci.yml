name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  musl-build:
    name: Build & Test Static Binary (musl) - Primary
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-unknown-linux-musl
        components: rustfmt, clippy

    - name: Install musl tools
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools pkg-config

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: musl-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: musl-cargo-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --target x86_64-unknown-linux-musl --all-targets --all-features -- -D warnings

    - name: Build static binary
      run: cargo build --release --target x86_64-unknown-linux-musl

    - name: Test static binary
      run: |
        file target/x86_64-unknown-linux-musl/release/axectl
        ldd target/x86_64-unknown-linux-musl/release/axectl || echo "Static binary confirmed (no dynamic dependencies)"
        target/x86_64-unknown-linux-musl/release/axectl --version

    - name: Run tests
      run: cargo test --target x86_64-unknown-linux-musl --verbose

    - name: Upload static binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: axectl-x86_64-linux-musl
        path: target/x86_64-unknown-linux-musl/release/axectl
        retention-days: 7

  test:
    name: Test Suite (Nix)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install Nix
      uses: cachix/install-nix-action@v31
      with:
        extra_nix_config: |
          experimental-features = nix-command flakes

    - name: Cache Nix store
      uses: actions/cache@v4
      with:
        path: /nix/store
        key: nix-${{ runner.os }}-${{ hashFiles('flake.lock') }}
        restore-keys: |
          nix-${{ runner.os }}-

    - name: Check formatting
      run: nix develop -c cargo fmt --all -- --check

    - name: Run clippy
      run: nix develop -c cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      run: nix develop -c cargo build --verbose

    - name: Run tests
      run: nix develop -c cargo test --verbose

    - name: Run tests with all features
      run: nix develop -c cargo test --all-features --verbose

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: audit-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install Nix
      uses: cachix/install-nix-action@v31
      with:
        extra_nix_config: |
          experimental-features = nix-command flakes

    - name: Run security audit
      run: nix run nixpkgs#cargo-audit -- audit

